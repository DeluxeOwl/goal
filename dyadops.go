// Code generated by genop.pl. DO NOT EDIT.

package main

import (
	"math"
	"strings"
)

// Equal returns w=x.
func Equal(w, x V) V {
	switch w := w.(type) {
	case F:
		return equalFV(w, x)
	case I:
		return equalIV(w, x)
	case S:
		return equalSV(w, x)
	case AB:
		return equalABV(w, x)
	case AF:
		return equalAFV(w, x)
	case AI:
		return equalAIV(w, x)
	case AS:
		return equalASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Equal(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Equal(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func equalFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return B2I(w == x)
	case I:
		return B2I(w == F(x))
	case AB:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) == B2F(x[i]))
		}
		return r
	case AF:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) == F(x[i]))
		}
		return r
	case AI:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) == F(I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := equalFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func equalIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return B2I(F(w) == x)
	case I:
		return B2I(w == x)
	case AB:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w) == B2I(x[i]))
		}
		return r
	case AF:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(I(w)) == F(x[i]))
		}
		return r
	case AI:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w) == I(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := equalIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func equalSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return B2I(w == x)
	case AS:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(S(w) == S(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := equalSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func equalABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(B2F(w[i]) == F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(B2I(w[i]) == I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(w[i] == x[i])
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(B2F(w[i]) == F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(B2I(w[i]) == I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := equalIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func equalAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(w[i]) == F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(w[i]) == F(I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) == B2F(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) == F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) == F(I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := equalFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func equalAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(I(w[i])) == F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(I(w[i]) == I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w[i]) == B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(I(w[i])) == F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w[i]) == I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := equalIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func equalASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(S(w[i]) == S(x))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(S(w[i]) == S(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := equalSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Lesser returns w<x.
func Lesser(w, x V) V {
	switch w := w.(type) {
	case F:
		return lesserFV(w, x)
	case I:
		return lesserIV(w, x)
	case S:
		return lesserSV(w, x)
	case AB:
		return lesserABV(w, x)
	case AF:
		return lesserAFV(w, x)
	case AI:
		return lesserAIV(w, x)
	case AS:
		return lesserASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Lesser(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Lesser(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func lesserFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return B2I(w < x)
	case I:
		return B2I(w < F(x))
	case AB:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) < B2F(x[i]))
		}
		return r
	case AF:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) < F(x[i]))
		}
		return r
	case AI:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) < F(I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := lesserFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func lesserIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return B2I(F(w) < x)
	case I:
		return B2I(w < x)
	case AB:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w) < B2I(x[i]))
		}
		return r
	case AF:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(I(w)) < F(x[i]))
		}
		return r
	case AI:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w) < I(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := lesserIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func lesserSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return B2I(w < x)
	case AS:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(S(w) < S(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := lesserSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func lesserABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(B2F(w[i]) < F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(B2I(w[i]) < I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(!w[i] && x[i])
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(B2F(w[i]) < F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(B2I(w[i]) < I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := lesserIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func lesserAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(w[i]) < F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(w[i]) < F(I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) < B2F(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) < F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) < F(I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := lesserFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func lesserAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(I(w[i])) < F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(I(w[i]) < I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w[i]) < B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(I(w[i])) < F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w[i]) < I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := lesserIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func lesserASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(S(w[i]) < S(x))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(S(w[i]) < S(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := lesserSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Greater returns w>x.
func Greater(w, x V) V {
	switch w := w.(type) {
	case F:
		return greaterFV(w, x)
	case I:
		return greaterIV(w, x)
	case S:
		return greaterSV(w, x)
	case AB:
		return greaterABV(w, x)
	case AF:
		return greaterAFV(w, x)
	case AI:
		return greaterAIV(w, x)
	case AS:
		return greaterASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Greater(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Greater(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func greaterFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return B2I(w > x)
	case I:
		return B2I(w > F(x))
	case AB:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) > B2F(x[i]))
		}
		return r
	case AF:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) > F(x[i]))
		}
		return r
	case AI:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w) > F(I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := greaterFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func greaterIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return B2I(F(w) > x)
	case I:
		return B2I(w > x)
	case AB:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w) > B2I(x[i]))
		}
		return r
	case AF:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(I(w)) > F(x[i]))
		}
		return r
	case AI:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w) > I(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := greaterIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func greaterSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return B2I(w > x)
	case AS:
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(S(w) > S(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := greaterSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func greaterABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(B2F(w[i]) > F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(B2I(w[i]) > I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(w[i] && !x[i])
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(B2F(w[i]) > F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(B2I(w[i]) > I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := greaterIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func greaterAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(w[i]) > F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(w[i]) > F(I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) > B2F(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) > F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(w[i]) > F(I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := greaterFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func greaterAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(F(I(w[i])) > F(x))
		}
		return r
	case I:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(I(w[i]) > I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w[i]) > B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(F(I(w[i])) > F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(I(w[i]) > I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := greaterIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func greaterASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AB, len(w))
		for i := range r {
			r[i] = bool(S(w[i]) > S(x))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(S(w[i]) > S(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := greaterSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Add returns w+x.
func Add(w, x V) V {
	switch w := w.(type) {
	case F:
		return addFV(w, x)
	case I:
		return addIV(w, x)
	case S:
		return addSV(w, x)
	case AB:
		return addABV(w, x)
	case AF:
		return addAFV(w, x)
	case AI:
		return addAIV(w, x)
	case AS:
		return addASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Add(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Add(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func addFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return F(w + x)
	case I:
		return F(w + F(x))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) + B2F(x[i]))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) + F(x[i]))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) + F(I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := addFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func addIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(w) + x)
	case I:
		return I(w + x)
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w) + B2I(x[i]))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(I(w)) + F(x[i]))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w) + I(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := addIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func addSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return S(w + x)
	case AS:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(S(w) + S(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := addSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func addABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(B2F(w[i]) + F(x))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(B2I(w[i]) + I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(B2I(w[i]) + B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(B2F(w[i]) + F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(B2I(w[i]) + I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := addIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func addAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(w[i]) + F(x))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(w[i]) + F(I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) + B2F(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) + F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) + F(I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := addFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func addAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(I(w[i])) + F(x))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(I(w[i]) + I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w[i]) + B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(I(w[i])) + F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w[i]) + I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := addIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func addASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(S(w[i]) + S(x))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(S(w[i]) + S(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := addSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Subtract returns w-x.
func Subtract(w, x V) V {
	switch w := w.(type) {
	case F:
		return subtractFV(w, x)
	case I:
		return subtractIV(w, x)
	case S:
		return subtractSV(w, x)
	case AB:
		return subtractABV(w, x)
	case AF:
		return subtractAFV(w, x)
	case AI:
		return subtractAIV(w, x)
	case AS:
		return subtractASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Subtract(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Subtract(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func subtractFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return F(w - x)
	case I:
		return F(w - F(x))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) - B2F(x[i]))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) - F(x[i]))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) - F(I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := subtractFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func subtractIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(w) - x)
	case I:
		return I(w - x)
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w) - B2I(x[i]))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(I(w)) - F(x[i]))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w) - I(x[i]))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := subtractIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func subtractSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return S(strings.TrimSuffix(string(w), string(x)))
	case AS:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.TrimSuffix(string(S(w)), string(S(x[i]))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := subtractSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func subtractABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(B2F(w[i]) - F(x))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(B2I(w[i]) - I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(B2I(w[i]) - B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(B2F(w[i]) - F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(B2I(w[i]) - I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := subtractIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func subtractAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(w[i]) - F(x))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(w[i]) - F(I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) - B2F(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) - F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) - F(I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := subtractFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func subtractAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(I(w[i])) - F(x))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(I(w[i]) - I(x))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w[i]) - B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(I(w[i])) - F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w[i]) - I(x[i]))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := subtractIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func subtractASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(strings.TrimSuffix(string(S(w[i])), string(S(x))))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.TrimSuffix(string(S(w[i])), string(S(x[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := subtractSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Multiply returns w*x.
func Multiply(w, x V) V {
	switch w := w.(type) {
	case F:
		return multiplyFV(w, x)
	case I:
		return multiplyIV(w, x)
	case S:
		return multiplySV(w, x)
	case AB:
		return multiplyABV(w, x)
	case AF:
		return multiplyAFV(w, x)
	case AI:
		return multiplyAIV(w, x)
	case AS:
		return multiplyASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Multiply(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Multiply(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func multiplyFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return F(w * x)
	case I:
		return F(w * F(x))
	case S:
		return S(strings.Repeat(string(x), int(float64(w))))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) * B2F(x[i]))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) * F(x[i]))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w) * F(I(x[i])))
		}
		return r
	case AS:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(float64(F(w)))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := multiplyFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func multiplyIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(w) * x)
	case I:
		return I(w * x)
	case S:
		return S(strings.Repeat(string(x), int(w)))
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w) * B2I(x[i]))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(I(w)) * F(x[i]))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w) * I(x[i]))
		}
		return r
	case AS:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(I(w))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := multiplyIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func multiplySV(w S, x V) V {
	switch x := x.(type) {
	case F:
		return S(strings.Repeat(string(w), int(float64(x))))
	case I:
		return S(strings.Repeat(string(w), int(x)))
	case AB:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w)), int(B2I(x[i]))))
		}
		return r
	case AF:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w)), int(float64(F(x[i])))))
		}
		return r
	case AI:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w)), int(I(x[i]))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := multiplySV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func multiplyABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(B2F(w[i]) * F(x))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(B2I(w[i]) * I(x))
		}
		return r
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x)), int(B2I(w[i]))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(w[i] && x[i])
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(B2F(w[i]) * F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(B2I(w[i]) * I(x[i]))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(B2I(w[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := multiplyIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func multiplyAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(w[i]) * F(x))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(w[i]) * F(I(x)))
		}
		return r
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x)), int(float64(F(w[i])))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) * B2F(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) * F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(w[i]) * F(I(x[i])))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(float64(F(w[i])))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := multiplyFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func multiplyAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(I(w[i])) * F(x))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(I(w[i]) * I(x))
		}
		return r
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x)), int(I(w[i]))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w[i]) * B2I(x[i]))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(I(w[i])) * F(x[i]))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(I(w[i]) * I(x[i]))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(I(w[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := multiplyIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func multiplyASV(w AS, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w[i])), int(float64(F(x)))))
		}
		return r
	case I:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w[i])), int(I(x))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w[i])), int(B2I(x[i]))))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w[i])), int(float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(strings.Repeat(string(S(w[i])), int(I(x[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := multiplySV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Divide returns w%x.
func Divide(w, x V) V {
	switch w := w.(type) {
	case F:
		return divideFV(w, x)
	case I:
		return divideIV(w, x)
	case AB:
		return divideABV(w, x)
	case AF:
		return divideAFV(w, x)
	case AI:
		return divideAIV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Divide(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Divide(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func divideFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return F(divide(w, x))
	case I:
		return F(divide(w, F(x)))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(w), B2F(x[i])))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(w), F(x[i])))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(w), F(I(x[i]))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := divideFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func divideIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return F(divide(F(w), x))
	case I:
		return F(divide(F(w), F(x)))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(I(w)), B2F(x[i])))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(I(w)), F(x[i])))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(I(w)), F(I(x[i]))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := divideIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func divideABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(divide(B2F(w[i]), F(x)))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(divide(B2F(w[i]), F(I(x))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(B2F(w[i]), B2F(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(B2F(w[i]), F(x[i])))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(B2F(w[i]), F(I(x[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := divideIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func divideAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(divide(F(w[i]), F(x)))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(divide(F(w[i]), F(I(x))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(w[i]), B2F(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(w[i]), F(x[i])))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(w[i]), F(I(x[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := divideFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func divideAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(divide(F(I(w[i])), F(x)))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(divide(F(I(w[i])), F(I(x))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(I(w[i])), B2F(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(I(w[i])), F(x[i])))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(divide(F(I(w[i])), F(I(x[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := divideIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Minimum returns w&x.
func Minimum(w, x V) V {
	switch w := w.(type) {
	case F:
		return minimumFV(w, x)
	case I:
		return minimumIV(w, x)
	case S:
		return minimumSV(w, x)
	case AB:
		return minimumABV(w, x)
	case AF:
		return minimumAFV(w, x)
	case AI:
		return minimumAIV(w, x)
	case AS:
		return minimumASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Minimum(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Minimum(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func minimumFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(math.Min(float64(w), float64(x))))
	case I:
		return F(F(math.Min(float64(w), float64(x))))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w)), float64(B2F(x[i])))))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w)), float64(F(x[i])))))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w)), float64(I(x[i])))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := minimumFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func minimumIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(math.Min(float64(w), float64(x))))
	case I:
		return I(minI(w, x))
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(minI(I(w), B2I(x[i])))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(I(w)), float64(F(x[i])))))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(minI(I(w), I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := minimumIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func minimumSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return S(minS(w, x))
	case AS:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(minS(S(w), S(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := minimumSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func minimumABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Min(float64(B2F(w[i])), float64(F(x)))))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(minI(B2I(w[i]), I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(w[i] && x[i])
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(B2F(w[i])), float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(minI(B2I(w[i]), I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := minimumIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func minimumAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w[i])), float64(F(x)))))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w[i])), float64(I(x)))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w[i])), float64(B2F(x[i])))))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w[i])), float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(w[i])), float64(I(x[i])))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := minimumFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func minimumAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Min(float64(I(w[i])), float64(F(x)))))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(minI(I(w[i]), I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(minI(I(w[i]), B2I(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Min(float64(I(w[i])), float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(minI(I(w[i]), I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := minimumIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func minimumASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(minS(S(w[i]), S(x)))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(minS(S(w[i]), S(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := minimumSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Maximum returns w|x.
func Maximum(w, x V) V {
	switch w := w.(type) {
	case F:
		return maximumFV(w, x)
	case I:
		return maximumIV(w, x)
	case S:
		return maximumSV(w, x)
	case AB:
		return maximumABV(w, x)
	case AF:
		return maximumAFV(w, x)
	case AI:
		return maximumAIV(w, x)
	case AS:
		return maximumASV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Maximum(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Maximum(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func maximumFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(math.Max(float64(w), float64(x))))
	case I:
		return F(F(math.Max(float64(w), float64(x))))
	case AB:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w)), float64(B2F(x[i])))))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w)), float64(F(x[i])))))
		}
		return r
	case AI:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w)), float64(I(x[i])))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := maximumFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func maximumIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return F(F(math.Max(float64(w), float64(x))))
	case I:
		return I(maxI(w, x))
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(maxI(I(w), B2I(x[i])))
		}
		return r
	case AF:
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(I(w)), float64(F(x[i])))))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(maxI(I(w), I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := maximumIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func maximumSV(w S, x V) V {
	switch x := x.(type) {
	case S:
		return S(maxS(w, x))
	case AS:
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(maxS(S(w), S(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := maximumSV(S(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func maximumABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Max(float64(B2F(w[i])), float64(F(x)))))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(maxI(B2I(w[i]), I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AB, len(x))
		for i := range r {
			r[i] = bool(w[i] || x[i])
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(B2F(w[i])), float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(maxI(B2I(w[i]), I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := maximumIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func maximumAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w[i])), float64(F(x)))))
		}
		return r
	case I:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w[i])), float64(I(x)))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w[i])), float64(B2F(x[i])))))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w[i])), float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(w[i])), float64(I(x[i])))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := maximumFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func maximumAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AF, len(w))
		for i := range r {
			r[i] = float64(F(math.Max(float64(I(w[i])), float64(F(x)))))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(maxI(I(w[i]), I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(maxI(I(w[i]), B2I(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AF, len(x))
		for i := range r {
			r[i] = float64(F(math.Max(float64(I(w[i])), float64(F(x[i])))))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(maxI(I(w[i]), I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := maximumIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func maximumASV(w AS, x V) V {
	switch x := x.(type) {
	case S:
		r := make(AS, len(w))
		for i := range r {
			r[i] = string(maxS(S(w[i]), S(x)))
		}
		return r
	case AS:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AS, len(x))
		for i := range r {
			r[i] = string(maxS(S(w[i]), S(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := maximumSV(S(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

// Modulus returns w mod x.
func Modulus(w, x V) V {
	switch w := w.(type) {
	case F:
		return modulusFV(w, x)
	case I:
		return modulusIV(w, x)
	case AB:
		return modulusABV(w, x)
	case AF:
		return modulusAFV(w, x)
	case AI:
		return modulusAIV(w, x)
	case AV:
		switch x := x.(type) {
		case Array:
			if x.Len() != len(w) {
				return errf("length mismatch: %d vs %d", len(w), x.Len())
			}
			r := make(AV, len(w))
			for i := range r {
				v := Modulus(w[i], x.At(i))
				e, ok := v.(E)
				if ok {
					return e
				}
				r[i] = v
			}
			return r
		}
		r := make(AV, len(w))
		for i := range r {
			v := Modulus(w[i], x)
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errwType(w)
	}
}

func modulusFV(w F, x V) V {
	switch x := x.(type) {
	case F:
		return I(modF(w, x))
	case I:
		return I(modF(w, F(x)))
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(w), F(B2I(x[i]))))
		}
		return r
	case AF:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(w), F(x[i])))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(w), F(I(x[i]))))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := modulusFV(F(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func modulusIV(w I, x V) V {
	switch x := x.(type) {
	case F:
		return I(modF(F(w), x))
	case I:
		return I(modI(w, x))
	case AB:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modI(I(w), B2I(x[i])))
		}
		return r
	case AF:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(I(w)), F(x[i])))
		}
		return r
	case AI:
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modI(I(w), I(x[i])))
		}
		return r
	case AV:
		r := make(AV, len(x))
		for i := range r {
			v := modulusIV(I(w), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func modulusABV(w AB, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(modF(F(B2I(w[i])), F(x)))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(modI(B2I(w[i]), I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modI(B2I(w[i]), B2I(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(B2I(w[i])), F(x[i])))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modI(B2I(w[i]), I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := modulusIV(B2I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func modulusAFV(w AF, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(modF(F(w[i]), F(x)))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(modF(F(w[i]), F(I(x))))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(w[i]), F(B2I(x[i]))))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(w[i]), F(x[i])))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(w[i]), F(I(x[i]))))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := modulusFV(F(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}

func modulusAIV(w AI, x V) V {
	switch x := x.(type) {
	case F:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(modF(F(I(w[i])), F(x)))
		}
		return r
	case I:
		r := make(AI, len(w))
		for i := range r {
			r[i] = int(modI(I(w[i]), I(x)))
		}
		return r
	case AB:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modI(I(w[i]), B2I(x[i])))
		}
		return r
	case AF:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modF(F(I(w[i])), F(x[i])))
		}
		return r
	case AI:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AI, len(x))
		for i := range r {
			r[i] = int(modI(I(w[i]), I(x[i])))
		}
		return r
	case AV:
		if len(w) != len(x) {
			return errf("length mismatch: %d vs %d", len(w), len(x))
		}
		r := make(AV, len(x))
		for i := range r {
			v := modulusIV(I(w[i]), x[i])
			e, ok := v.(E)
			if ok {
				return e
			}
			r[i] = v
		}
		return r
	case E:
		return w
	default:
		return errType(x)
	}
}
