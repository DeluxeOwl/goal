// Code generated by genop.pl. DO NOT EDIT.

package goal

import (
	"math"
	"strings"
)

// equal returns x=y.
func equal(x, y V) V {
	if x.IsInt() {
		return equalIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return equalFV(x, y)
	case S:
		return equalSV(x, y)
	case AB:
		return equalABV(x, y)
	case AF:
		return equalAFV(x, y)
	case AI:
		return equalAIV(x, y)
	case AS:
		return equalASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := equal(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := equal(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "x", x)
	}
}

func equalFV(x F, y V) V {
	if y.IsInt() {
		return NewI(B2I(x == F(y.Int())))
	}
	switch y := y.Value.(type) {
	case F:
		return NewI(int(B2I(x == y)))
	case AB:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) == B2F(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) == F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) == F(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := equalFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

func equalIV(x int, y V) V {
	if y.IsInt() {
		return NewI(B2I(x == y.Int()))
	}
	switch y := y.Value.(type) {
	case F:
		return NewI(int(B2I(F(x) == y)))
	case AB:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x == B2I(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) == F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x == y[i])
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := equalIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

func equalSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewI(int(B2I(x == y)))
	case AS:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(S(x) == S(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := equalSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

func equalABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(B2I(x[i]) == int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(B2F(x[i]) == F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] == y[i])
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(B2F(x[i]) == F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(B2I(x[i]) == y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := equalIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

func equalAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == F(int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == B2F(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == F(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := equalFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

func equalAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(x[i] == int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] == B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) == F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] == y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := equalIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

func equalASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(S(x[i]) == S(y))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(S(x[i]) == S(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x=y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := equalSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x=y", "y", y)
	}
}

// lesser returns x<y.
func lesser(x, y V) V {
	if x.IsInt() {
		return lesserIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return lesserFV(x, y)
	case S:
		return lesserSV(x, y)
	case AB:
		return lesserABV(x, y)
	case AF:
		return lesserAFV(x, y)
	case AI:
		return lesserAIV(x, y)
	case AS:
		return lesserASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := lesser(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := lesser(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "x", x)
	}
}

func lesserFV(x F, y V) V {
	if y.IsInt() {
		return NewI(B2I(x < F(y.Int())))
	}
	switch y := y.Value.(type) {
	case F:
		return NewI(int(B2I(x < y)))
	case AB:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) < B2F(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) < F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) < F(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

func lesserIV(x int, y V) V {
	if y.IsInt() {
		return NewI(B2I(x < y.Int()))
	}
	switch y := y.Value.(type) {
	case F:
		return NewI(int(B2I(F(x) < y)))
	case AB:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x < B2I(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) < F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x < y[i])
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

func lesserSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewI(int(B2I(x < y)))
	case AS:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(S(x) < S(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

func lesserABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(B2I(x[i]) < int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(B2F(x[i]) < F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(!x[i] && y[i])
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(B2F(x[i]) < F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(B2I(x[i]) < y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

func lesserAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < F(int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < B2F(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < F(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

func lesserAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(x[i] < int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] < B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) < F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] < y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

func lesserASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(S(x[i]) < S(y))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(S(x[i]) < S(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x<y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := lesserSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x<y", "y", y)
	}
}

// greater returns x>y.
func greater(x, y V) V {
	if x.IsInt() {
		return greaterIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return greaterFV(x, y)
	case S:
		return greaterSV(x, y)
	case AB:
		return greaterABV(x, y)
	case AF:
		return greaterAFV(x, y)
	case AI:
		return greaterAIV(x, y)
	case AS:
		return greaterASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := greater(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := greater(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "x", x)
	}
}

func greaterFV(x F, y V) V {
	if y.IsInt() {
		return NewI(B2I(x > F(y.Int())))
	}
	switch y := y.Value.(type) {
	case F:
		return NewI(int(B2I(x > y)))
	case AB:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) > B2F(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) > F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) > F(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

func greaterIV(x int, y V) V {
	if y.IsInt() {
		return NewI(B2I(x > y.Int()))
	}
	switch y := y.Value.(type) {
	case F:
		return NewI(int(B2I(F(x) > y)))
	case AB:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x > B2I(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x) > F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x > y[i])
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

func greaterSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewI(int(B2I(x > y)))
	case AS:
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(S(x) > S(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

func greaterABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(B2I(x[i]) > int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(B2F(x[i]) > F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] && !y[i])
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(B2F(x[i]) > F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(B2I(x[i]) > y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

func greaterAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > F(int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > B2F(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > F(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

func greaterAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(x[i] > int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] > B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(F(x[i]) > F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] > y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

func greaterASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AB, x.Len())
		for i := range r {
			r[i] = bool(S(x[i]) > S(y))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(S(x[i]) > S(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x>y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := greaterSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x>y", "y", y)
	}
}

// add returns x+y.
func add(x, y V) V {
	if x.IsInt() {
		return addIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return addFV(x, y)
	case S:
		return addSV(x, y)
	case AB:
		return addABV(x, y)
	case AF:
		return addAFV(x, y)
	case AI:
		return addAIV(x, y)
	case AS:
		return addASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := add(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := add(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "x", x)
	}
}

func addFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(x + F(y.Int())))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(x + y))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) + B2F(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) + F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) + F(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := addFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

func addIV(x int, y V) V {
	if y.IsInt() {
		return NewI(x + y.Int())
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(x) + y))
	case AB:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x + B2I(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) + F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x + y[i])
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := addIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

func addSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewV(S(x + y))
	case AS:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(S(x) + S(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := addSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

func addABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) + int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(B2F(x[i]) + F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) + B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(B2F(x[i]) + F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) + y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := addIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

func addAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + F(int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + B2F(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + F(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := addFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

func addAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(x[i] + int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x[i] + B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) + F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x[i] + y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := addIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

func addASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(S(x[i]) + S(y))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(S(x[i]) + S(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x+y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := addSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x+y", "y", y)
	}
}

// subtract returns x-y.
func subtract(x, y V) V {
	if x.IsInt() {
		return subtractIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return subtractFV(x, y)
	case S:
		return subtractSV(x, y)
	case AB:
		return subtractABV(x, y)
	case AF:
		return subtractAFV(x, y)
	case AI:
		return subtractAIV(x, y)
	case AS:
		return subtractASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := subtract(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := subtract(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "x", x)
	}
}

func subtractFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(x - F(y.Int())))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(x - y))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) - B2F(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) - F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) - F(y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

func subtractIV(x int, y V) V {
	if y.IsInt() {
		return NewI(x - y.Int())
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(x) - y))
	case AB:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x - B2I(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) - F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x - y[i])
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

func subtractSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewV(S(strings.TrimSuffix(string(x), string(y))))
	case AS:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.TrimSuffix(string(S(x)), string(S(y[i]))))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

func subtractABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) - int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(B2F(x[i]) - F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) - B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(B2F(x[i]) - F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) - y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

func subtractAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - F(int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - B2F(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - F(y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

func subtractAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(x[i] - int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - F(y))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x[i] - B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) - F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x[i] - y[i])
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

func subtractASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(strings.TrimSuffix(string(S(x[i])), string(S(y))))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.TrimSuffix(string(S(x[i])), string(S(y[i]))))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x-y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := subtractSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x-y", "y", y)
	}
}

// multiply returns x*y.
func multiply(x, y V) V {
	if x.IsInt() {
		return multiplyIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return multiplyFV(x, y)
	case S:
		return multiplySV(x, y)
	case AB:
		return multiplyABV(x, y)
	case AF:
		return multiplyAFV(x, y)
	case AI:
		return multiplyAIV(x, y)
	case AS:
		return multiplyASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := multiply(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := multiply(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "x", x)
	}
}

func multiplyFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(x * F(y.Int())))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(x * y))
	case S:
		return NewV(S(strings.Repeat(string(y), int(float64(x)))))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) * B2F(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) * F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) * F(y[i]))
		}
		return NewV(r)
	case AS:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y[i])), int(float64(F(x)))))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplyFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

func multiplyIV(x int, y V) V {
	if y.IsInt() {
		return NewI(x * y.Int())
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(x) * y))
	case S:
		return NewV(S(strings.Repeat(string(y), int(x))))
	case AB:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x * B2I(y[i]))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x) * F(y[i]))
		}
		return NewV(r)
	case AI:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x * y[i])
		}
		return NewV(r)
	case AS:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y[i])), int(x)))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplyIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

func multiplySV(x S, y V) V {
	if y.IsInt() {
		return NewV(S(strings.Repeat(string(x), int(y.Int()))))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(S(strings.Repeat(string(x), int(float64(y)))))
	case AB:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x)), int(B2I(y[i]))))
		}
		return NewV(r)
	case AF:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x)), int(float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x)), int(y[i])))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplySV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

func multiplyABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) * int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(B2F(x[i]) * F(y))
		}
		return NewV(r)
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y)), int(B2I(x[i]))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] && y[i])
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(B2F(x[i]) * F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(B2I(x[i]) * y[i])
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y[i])), int(B2I(x[i]))))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplyIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

func multiplyAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * F(int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * F(y))
		}
		return NewV(r)
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y)), int(float64(F(x[i])))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * B2F(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * F(y[i]))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y[i])), int(float64(F(x[i])))))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplyFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

func multiplyAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(x[i] * int(y.Int()))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * F(y))
		}
		return NewV(r)
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y)), int(x[i])))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x[i] * B2I(y[i]))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(x[i]) * F(y[i]))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(x[i] * y[i])
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(y[i])), int(x[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplyIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

func multiplyASV(x AS, y V) V {
	if y.IsInt() {
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(int(y.Int()))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(B2I(y[i]))))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(strings.Repeat(string(S(x[i])), int(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x*y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := multiplySV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x*y", "y", y)
	}
}

// divide returns x%y.
func divide(x, y V) V {
	if x.IsInt() {
		return divideIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return divideFV(x, y)
	case AB:
		return divideABV(x, y)
	case AF:
		return divideAFV(x, y)
	case AI:
		return divideAIV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := divide(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := divide(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x%%y", "x", x)
	}
}

func divideFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(divideF(x, F(y.Int()))))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(divideF(x, y)))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x), B2F(y[i])))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x), F(y[i])))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x), F(y[i])))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := divideFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x%%y", "y", y)
	}
}

func divideIV(x int, y V) V {
	if y.IsInt() {
		return NewV(F(divideF(F(x), F(y.Int()))))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(divideF(F(x), y)))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x), B2F(y[i])))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x), F(y[i])))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x), F(y[i])))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := divideIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x%%y", "y", y)
	}
}

func divideABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(divideF(B2F(x[i]), F(int(y.Int()))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(divideF(B2F(x[i]), F(y)))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(B2F(x[i]), B2F(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(B2F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(B2F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := divideIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x%%y", "y", y)
	}
}

func divideAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(int(y.Int()))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(y)))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), B2F(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := divideFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x%%y", "y", y)
	}
}

func divideAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(int(y.Int()))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(y)))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), B2F(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(divideF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x%%y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := divideIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x%%y", "y", y)
	}
}

// minimum returns x&y.
func minimum(x, y V) V {
	if x.IsInt() {
		return minimumIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return minimumFV(x, y)
	case S:
		return minimumSV(x, y)
	case AB:
		return minimumABV(x, y)
	case AF:
		return minimumAFV(x, y)
	case AI:
		return minimumAIV(x, y)
	case AS:
		return minimumASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := minimum(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := minimum(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "x", x)
	}
}

func minimumFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(F(math.Min(float64(x), float64(y.Int())))))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(math.Min(float64(x), float64(y)))))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x)), float64(B2F(y[i])))))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x)), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x)), float64(y[i]))))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

func minimumIV(x int, y V) V {
	if y.IsInt() {
		return NewI(minI(x, y.Int()))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(math.Min(float64(x), float64(y)))))
	case AB:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(minI(x, B2I(y[i])))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(x), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(minI(x, y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

func minimumSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewV(S(minS(x, y)))
	case AS:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(minS(S(x), S(y[i])))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

func minimumABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(minI(B2I(x[i]), int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(B2F(x[i])), float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] && y[i])
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(B2F(x[i])), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(minI(B2I(x[i]), y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

func minimumAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x[i])), float64(int(y.Int())))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x[i])), float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x[i])), float64(B2F(y[i])))))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x[i])), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(F(x[i])), float64(y[i]))))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

func minimumAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(minI(x[i], int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(x[i]), float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(minI(x[i], B2I(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Min(float64(x[i]), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(minI(x[i], y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

func minimumASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(minS(S(x[i]), S(y)))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(minS(S(x[i]), S(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x&y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := minimumSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x&y", "y", y)
	}
}

// maximum returns x|y.
func maximum(x, y V) V {
	if x.IsInt() {
		return maximumIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return maximumFV(x, y)
	case S:
		return maximumSV(x, y)
	case AB:
		return maximumABV(x, y)
	case AF:
		return maximumAFV(x, y)
	case AI:
		return maximumAIV(x, y)
	case AS:
		return maximumASV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := maximum(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := maximum(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "x", x)
	}
}

func maximumFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(F(math.Max(float64(x), float64(y.Int())))))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(math.Max(float64(x), float64(y)))))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x)), float64(B2F(y[i])))))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x)), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x)), float64(y[i]))))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

func maximumIV(x int, y V) V {
	if y.IsInt() {
		return NewI(maxI(x, y.Int()))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(F(math.Max(float64(x), float64(y)))))
	case AB:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(maxI(x, B2I(y[i])))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(x), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(maxI(x, y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

func maximumSV(x S, y V) V {
	switch y := y.Value.(type) {
	case S:
		return NewV(S(maxS(x, y)))
	case AS:
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(maxS(S(x), S(y[i])))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumSV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

func maximumABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(maxI(B2I(x[i]), int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(B2F(x[i])), float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AB, y.Len())
		for i := range r {
			r[i] = bool(x[i] || y[i])
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(B2F(x[i])), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(maxI(B2I(x[i]), y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

func maximumAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x[i])), float64(int(y.Int())))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x[i])), float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x[i])), float64(B2F(y[i])))))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x[i])), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(F(x[i])), float64(y[i]))))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

func maximumAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(maxI(x[i], int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(x[i]), float64(F(y)))))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(maxI(x[i], B2I(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(F(math.Max(float64(x[i]), float64(F(y[i])))))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(maxI(x[i], y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

func maximumASV(x AS, y V) V {
	switch y := y.Value.(type) {
	case S:
		r := make(AS, x.Len())
		for i := range r {
			r[i] = string(maxS(S(x[i]), S(y)))
		}
		return NewV(r)
	case AS:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AS, y.Len())
		for i := range r {
			r[i] = string(maxS(S(x[i]), S(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x|y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := maximumSV(S(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x|y", "y", y)
	}
}

// modulus returns x mod y.
func modulus(x, y V) V {
	if x.IsInt() {
		return modulusIV(x.Int(), y)
	}
	switch x := x.Value.(type) {
	case F:
		return modulusFV(x, y)
	case AB:
		return modulusABV(x, y)
	case AF:
		return modulusAFV(x, y)
	case AI:
		return modulusAIV(x, y)
	case AV:
		switch y := y.Value.(type) {
		case array:
			if y.Len() != x.Len() {
				return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
			}
			r := make(AV, x.Len())
			for i := range r {
				ri := modulus(x[i], y.at(i))
				if ri.IsErr() {
					return ri
				}
				r[i] = ri
			}
			return NewV(r)
		}
		r := make(AV, x.Len())
		for i := range r {
			ri := modulus(x[i], y)
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x mod y", "x", x)
	}
}

func modulusFV(x F, y V) V {
	if y.IsInt() {
		return NewV(F(modF(x, F(y.Int()))))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(modF(x, y)))
	case AB:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x), F(B2I(y[i]))))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x), F(y[i])))
		}
		return NewV(r)
	case AI:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x), F(y[i])))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := modulusFV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x mod y", "y", y)
	}
}

func modulusIV(x int, y V) V {
	if y.IsInt() {
		return NewI(modI(x, y.Int()))
	}
	switch y := y.Value.(type) {
	case F:
		return NewV(F(modF(F(x), y)))
	case AB:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(modI(x, B2I(y[i])))
		}
		return NewV(r)
	case AF:
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x), F(y[i])))
		}
		return NewV(r)
	case AI:
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(modI(x, y[i]))
		}
		return NewV(r)
	case AV:
		r := make(AV, y.Len())
		for i := range r {
			ri := modulusIV(x, y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x mod y", "y", y)
	}
}

func modulusABV(x AB, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(modI(B2I(x[i]), int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(modF(F(B2I(x[i])), F(y)))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(modI(B2I(x[i]), B2I(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(B2I(x[i])), F(y[i])))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(modI(B2I(x[i]), y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := modulusIV(B2I(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x mod y", "y", y)
	}
}

func modulusAFV(x AF, y V) V {
	if y.IsInt() {
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(int(y.Int()))))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(y)))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(B2I(y[i]))))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := modulusFV(F(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x mod y", "y", y)
	}
}

func modulusAIV(x AI, y V) V {
	if y.IsInt() {
		r := make(AI, x.Len())
		for i := range r {
			r[i] = int(modI(x[i], int(y.Int())))
		}
		return NewV(r)
	}
	switch y := y.Value.(type) {
	case F:
		r := make(AF, x.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(y)))
		}
		return NewV(r)
	case AB:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(modI(x[i], B2I(y[i])))
		}
		return NewV(r)
	case AF:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AF, y.Len())
		for i := range r {
			r[i] = float64(modF(F(x[i]), F(y[i])))
		}
		return NewV(r)
	case AI:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AI, y.Len())
		for i := range r {
			r[i] = int(modI(x[i], y[i]))
		}
		return NewV(r)
	case AV:
		if x.Len() != y.Len() {
			return errf("x mod y : length mismatch: %d vs %d", x.Len(), y.Len())
		}
		r := make(AV, y.Len())
		for i := range r {
			ri := modulusIV(int(x[i]), y[i])
			if ri.IsErr() {
				return ri
			}
			r[i] = ri
		}
		return NewV(r)
	default:
		return errType("x mod y", "y", y)
	}
}
