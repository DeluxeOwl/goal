// Code generated by "stringer -type=TokenType,ppTokenType,ppBlockType,opcode -output stringer.go"; DO NOT EDIT.

package goal

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NONE-0]
	_ = x[EOF-1]
	_ = x[ERROR-2]
	_ = x[ADVERB-3]
	_ = x[IDENT-4]
	_ = x[LEFTBRACE-5]
	_ = x[LEFTBRACKET-6]
	_ = x[LEFTPAREN-7]
	_ = x[NEWLINE-8]
	_ = x[NUMBER-9]
	_ = x[RIGHTBRACE-10]
	_ = x[RIGHTBRACKET-11]
	_ = x[RIGHTPAREN-12]
	_ = x[SEMICOLON-13]
	_ = x[STRING-14]
	_ = x[VERB-15]
}

const _TokenType_name = "NONEEOFERRORADVERBIDENTLEFTBRACELEFTBRACKETLEFTPARENNEWLINENUMBERRIGHTBRACERIGHTBRACKETRIGHTPARENSEMICOLONSTRINGVERB"

var _TokenType_index = [...]uint8{0, 4, 7, 12, 18, 23, 32, 43, 52, 59, 65, 75, 87, 97, 106, 112, 116}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[pSEP-0]
	_ = x[pEOF-1]
	_ = x[pCLOSE-2]
	_ = x[pNUMBER-3]
	_ = x[pSTRING-4]
	_ = x[pIDENT-5]
	_ = x[pVERB-6]
	_ = x[pADVERB-7]
}

const _ppTokenType_name = "ppSEPppEOFppCLOSEppNUMBERppSTRINGppIDENTppVERBppADVERB"

var _ppTokenType_index = [...]uint8{0, 5, 10, 17, 25, 33, 40, 46, 54}

func (i pTokenType) String() string {
	if i < 0 || i >= pTokenType(len(_ppTokenType_index)-1) {
		return "ppTokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ppTokenType_name[_ppTokenType_index[i]:_ppTokenType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[pLAMBDA-0]
	_ = x[pARGS-1]
	_ = x[pSEQ-2]
	_ = x[pLIST-3]
}

const _ppBlockType_name = "ppLAMBDAppARGSppSEQppLIST"

var _ppBlockType_index = [...]uint8{0, 8, 14, 19, 25}

func (i pBlockType) String() string {
	if i < 0 || i >= pBlockType(len(_ppBlockType_index)-1) {
		return "ppBlockType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ppBlockType_name[_ppBlockType_index[i]:_ppBlockType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opNop-0]
	_ = x[opConst-1]
	_ = x[opNil-2]
	_ = x[opGlobal-3]
	_ = x[opLocal-4]
	_ = x[opAssignGlobal-5]
	_ = x[opAssignLocal-6]
	_ = x[opAdverb-7]
	_ = x[opVariadic-8]
	_ = x[opLambda-9]
	_ = x[opApply-10]
	_ = x[opApply2-11]
	_ = x[opApplyN-12]
	_ = x[opDrop-13]
}

const _opcode_name = "opNopopConstopNilopGlobalopLocalopAssignGlobalopAssignLocalopAdverbopVariadicopLambdaopApplyopApply2opApplyNopDrop"

var _opcode_index = [...]uint8{0, 5, 12, 17, 25, 32, 46, 59, 67, 77, 85, 92, 100, 108, 114}

func (i opcode) String() string {
	if i < 0 || i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
