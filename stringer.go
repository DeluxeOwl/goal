// Code generated by "stringer -type=Variadic,Adverb,TokenType,ppTokenType,ppBlockType,opcode -output stringer.go"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[vRight-0]
	_ = x[vAdd-1]
	_ = x[vSubtract-2]
	_ = x[vMultiply-3]
	_ = x[vDivide-4]
	_ = x[vMod-5]
	_ = x[vMin-6]
	_ = x[vMax-7]
	_ = x[vLess-8]
	_ = x[vMore-9]
	_ = x[vEqual-10]
	_ = x[vMatch-11]
	_ = x[vJoin-12]
	_ = x[vCut-13]
	_ = x[vTake-14]
	_ = x[vDrop-15]
	_ = x[vCast-16]
	_ = x[vFind-17]
	_ = x[vApply-18]
	_ = x[vApplyN-19]
	_ = x[vList-20]
}

const _Variadic_name = "vRightvAddvSubtractvMultiplyvDividevModvMinvMaxvLessvMorevEqualvMatchvJoinvCutvTakevDropvCastvFindvApplyvApplyNvList"

var _Variadic_index = [...]uint8{0, 6, 10, 19, 28, 35, 39, 43, 47, 52, 57, 63, 69, 74, 78, 83, 88, 93, 98, 104, 111, 116}

func (i Variadic) String() string {
	if i < 0 || i >= Variadic(len(_Variadic_index)-1) {
		return "Variadic(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Variadic_name[_Variadic_index[i]:_Variadic_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AEach-0]
	_ = x[AFold-1]
	_ = x[AScan-2]
}

const _Adverb_name = "AEachAFoldAScan"

var _Adverb_index = [...]uint8{0, 5, 10, 15}

func (i Adverb) String() string {
	if i < 0 || i >= Adverb(len(_Adverb_index)-1) {
		return "Adverb(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Adverb_name[_Adverb_index[i]:_Adverb_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[ERROR-1]
	_ = x[ADVERB-2]
	_ = x[IDENT-3]
	_ = x[LEFTBRACE-4]
	_ = x[LEFTBRACKET-5]
	_ = x[LEFTPAREN-6]
	_ = x[NEWLINE-7]
	_ = x[NUMBER-8]
	_ = x[RIGHTBRACE-9]
	_ = x[RIGHTBRACKET-10]
	_ = x[RIGHTPAREN-11]
	_ = x[SEMICOLON-12]
	_ = x[STRING-13]
	_ = x[VERB-14]
}

const _TokenType_name = "EOFERRORADVERBIDENTLEFTBRACELEFTBRACKETLEFTPARENNEWLINENUMBERRIGHTBRACERIGHTBRACKETRIGHTPARENSEMICOLONSTRINGVERB"

var _TokenType_index = [...]uint8{0, 3, 8, 14, 19, 28, 39, 48, 55, 61, 71, 83, 93, 102, 108, 112}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ppSEP-0]
	_ = x[ppEOF-1]
	_ = x[ppCLOSE-2]
	_ = x[ppNUMBER-3]
	_ = x[ppSTRING-4]
	_ = x[ppIDENT-5]
	_ = x[ppVERB-6]
	_ = x[ppADVERB-7]
}

const _ppTokenType_name = "ppSEPppEOFppCLOSEppNUMBERppSTRINGppIDENTppVERBppADVERB"

var _ppTokenType_index = [...]uint8{0, 5, 10, 17, 25, 33, 40, 46, 54}

func (i ppTokenType) String() string {
	if i < 0 || i >= ppTokenType(len(_ppTokenType_index)-1) {
		return "ppTokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ppTokenType_name[_ppTokenType_index[i]:_ppTokenType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ppLAMBDA-0]
	_ = x[ppARGS-1]
	_ = x[ppSEQ-2]
	_ = x[ppLIST-3]
}

const _ppBlockType_name = "ppLAMBDAppARGSppSEQppLIST"

var _ppBlockType_index = [...]uint8{0, 8, 14, 19, 25}

func (i ppBlockType) String() string {
	if i < 0 || i >= ppBlockType(len(_ppBlockType_index)-1) {
		return "ppBlockType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ppBlockType_name[_ppBlockType_index[i]:_ppBlockType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opNop-0]
	_ = x[opConst-1]
	_ = x[opGlobal-2]
	_ = x[opLocal-3]
	_ = x[opAssignGlobal-4]
	_ = x[opAssignLocal-5]
	_ = x[opAdverb-6]
	_ = x[opVariadic-7]
	_ = x[opLambda-8]
	_ = x[opApply-9]
	_ = x[opApply2-10]
	_ = x[opApplyN-11]
	_ = x[opDrop-12]
}

const _opcode_name = "opNopopConstopGlobalopLocalopAssignGlobalopAssignLocalopAdverbopVariadicopLambdaopApplyopApply2opApplyNopDrop"

var _opcode_index = [...]uint8{0, 5, 12, 20, 27, 41, 54, 62, 72, 80, 87, 95, 103, 109}

func (i opcode) String() string {
	if i < 0 || i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
