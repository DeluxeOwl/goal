// Code generated by "stringer -type=TokenType,astTokenType,opcode -output stringer.go"; DO NOT EDIT.

package goal

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NONE-0]
	_ = x[EOF-1]
	_ = x[ERROR-2]
	_ = x[ADVERB-3]
	_ = x[DYAD-4]
	_ = x[DYADASSIGN-5]
	_ = x[IDENT-6]
	_ = x[LEFTBRACE-7]
	_ = x[LEFTBRACKET-8]
	_ = x[LEFTPAREN-9]
	_ = x[NEWLINE-10]
	_ = x[NUMBER-11]
	_ = x[MONAD-12]
	_ = x[RIGHTBRACE-13]
	_ = x[RIGHTBRACKET-14]
	_ = x[RIGHTPAREN-15]
	_ = x[SEMICOLON-16]
	_ = x[STRING-17]
}

const _TokenType_name = "NONEEOFERRORADVERBDYADDYADASSIGNIDENTLEFTBRACELEFTBRACKETLEFTPARENNEWLINENUMBERMONADRIGHTBRACERIGHTBRACKETRIGHTPARENSEMICOLONSTRING"

var _TokenType_index = [...]uint8{0, 4, 7, 12, 18, 22, 32, 37, 46, 57, 66, 73, 79, 84, 94, 106, 116, 125, 131}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[astNUMBER-0]
	_ = x[astSTRING-1]
	_ = x[astIDENT-2]
	_ = x[astMONAD-3]
	_ = x[astDYAD-4]
	_ = x[astADVERB-5]
	_ = x[astEMPTYLIST-6]
}

const _astTokenType_name = "astNUMBERastSTRINGastIDENTastMONADastDYADastADVERBastEMPTYLIST"

var _astTokenType_index = [...]uint8{0, 9, 18, 26, 34, 41, 50, 62}

func (i astTokenType) String() string {
	if i < 0 || i >= astTokenType(len(_astTokenType_index)-1) {
		return "astTokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _astTokenType_name[_astTokenType_index[i]:_astTokenType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opNop-0]
	_ = x[opConst-1]
	_ = x[opNil-2]
	_ = x[opGlobal-3]
	_ = x[opGlobalLast-4]
	_ = x[opLocal-5]
	_ = x[opLocalLast-6]
	_ = x[opAssignGlobal-7]
	_ = x[opAssignLocal-8]
	_ = x[opAdverb-9]
	_ = x[opVariadic-10]
	_ = x[opLambda-11]
	_ = x[opApply-12]
	_ = x[opApplyV-13]
	_ = x[opApply2-14]
	_ = x[opApply2V-15]
	_ = x[opApplyN-16]
	_ = x[opApplyNV-17]
	_ = x[opDrop-18]
	_ = x[opJump-19]
	_ = x[opJumpFalse-20]
	_ = x[opJumpTrue-21]
	_ = x[opReturn-22]
}

const _opcode_name = "opNopopConstopNilopGlobalopGlobalLastopLocalopLocalLastopAssignGlobalopAssignLocalopAdverbopVariadicopLambdaopApplyopApplyVopApply2opApply2VopApplyNopApplyNVopDropopJumpopJumpFalseopJumpTrueopReturn"

var _opcode_index = [...]uint8{0, 5, 12, 17, 25, 37, 44, 55, 69, 82, 90, 100, 108, 115, 123, 131, 140, 148, 157, 163, 169, 180, 190, 198}

func (i opcode) String() string {
	if i < 0 || i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
